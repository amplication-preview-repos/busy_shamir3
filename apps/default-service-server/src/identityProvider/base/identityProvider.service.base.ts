/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  IdentityProvider as PrismaIdentityProvider,
} from "@prisma/client";

export class IdentityProviderServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.IdentityProviderCountArgs, "select">
  ): Promise<number> {
    return this.prisma.identityProvider.count(args);
  }

  async identityProviders<T extends Prisma.IdentityProviderFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.IdentityProviderFindManyArgs>
  ): Promise<PrismaIdentityProvider[]> {
    return this.prisma.identityProvider.findMany<Prisma.IdentityProviderFindManyArgs>(
      args
    );
  }
  async identityProvider<T extends Prisma.IdentityProviderFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.IdentityProviderFindUniqueArgs>
  ): Promise<PrismaIdentityProvider | null> {
    return this.prisma.identityProvider.findUnique(args);
  }
  async createIdentityProvider<T extends Prisma.IdentityProviderCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.IdentityProviderCreateArgs>
  ): Promise<PrismaIdentityProvider> {
    return this.prisma.identityProvider.create<T>(args);
  }
  async updateIdentityProvider<T extends Prisma.IdentityProviderUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.IdentityProviderUpdateArgs>
  ): Promise<PrismaIdentityProvider> {
    return this.prisma.identityProvider.update<T>(args);
  }
  async deleteIdentityProvider<T extends Prisma.IdentityProviderDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.IdentityProviderDeleteArgs>
  ): Promise<PrismaIdentityProvider> {
    return this.prisma.identityProvider.delete(args);
  }
}
